#!/bin/sh

# activate pool for iocage
# intended for automation tool
__activate () {
    local _pool
    _pool="$1"

    if [ ! -z ${_pool} ] ; then
        zpool set comment=iocage ${_pool}
    else
        __find_mypool
        echo "pool: ${pool}"
    fi

    exit 0
}

__deactivate () {
    local _pool
    _pool="$1"

    if [ ! -z ${_pool} ] ; then
        zpool set comment=inherit ${_pool}
    fi

    exit 0
}

__clean () {
    local _answer _base_exists _jail_type

    # Look for the right switch and then ask the user if they are sure
    case "$1" in
        -a)
            echo " "
            echo "  WARNING: this will destroy ${pool}${iocroot}"
            echo " "
            echo -n "  Are you sure ? y[N]: "
            read _answer

            if [ "${_answer}" == "Y" -o "${_answer}" == "y" ] ; then
                __stop_jail_all > /dev/null 2>&1
                if [ $? -eq 0 ] ; then
                    __spinner "  INFO: destroying ${pool}${iocroot}:  " \
                              "zfs destroy -rRf ${pool}${iocroot}"
                    rm -rf ${iocroot}
                    exit 0
                else
                    __die "some jails were unable to be stopped."
                fi
            else
                __die "command not confirmed.  no action taken."
            fi
        ;;
        -b)
            echo " "
            echo "  WARNING: this will destroy all bases and basejails"
            echo " "
            echo -n "  Are you sure ? y[N]: "
            read _answer

            if [ "${_answer}" == "Y" -o "${_answer}" == "y" ] ; then
                __clean_basejail
                if [ $? -eq 0 ] ; then
                    __spinner "  INFO: destroying ${pool}${iocroot}/rel:  " \
                              "zfs destroy -rRf ${pool}${iocroot}/rel"
                    __spinner "  INFO: destroying ${pool}${iocroot}/base:  " \
                              "zfs destroy -rRf ${pool}${iocroot}/base"
                    exit 0
                else
                    __die "some jails were unable to be stopped."
                fi
            else
                __die "command not confirmed.  no action taken."
            fi
        ;;
        -j)
            echo " "
            echo "  WARNING: this will destroy all jails"
            echo " "
            echo -n "  Are you sure ? y[N]: "
            read _answer

            if [ "${_answer}" == "Y" -o "${_answer}" == "y" ] ; then
                __clean_snapshots
                __stop_jail_all > /dev/null 2>&1
                if [ $? -eq 0 ] ; then
                    __spinner "  INFO: destroying ${pool}${iocroot}/jails:  " \
                              "zfs destroy -rRf ${pool}${iocroot}/jails"
                    __spinner "  INFO: cleaning TAGs at ${pool}${iocroot}/tags:  " \
                              "rm -rf ${iocroot}/tags"
                    exit 0
                else
                    __die "some jails were unable to be stopped."
                fi
            else
                __die "command not confirmed.  no action taken."
            fi
        ;;
    esac
}

__clean_basejail () {
    local _jails _juuid _jail_type
    _jails=$(__find_jail ALL)

    for _jail in ${_jails} ; do
        _juuid="$(zfs get -H -o value org.freebsd.iocage:host_hostuuid \
                ${_jail})"
        _jail_type="$(__get_jail_prop type ${_juuid} 2> /dev/null)"
        if [ "${_jail_type}" == "basejail" ] ; then
            __destroy_jail "-f" "${_juuid}" > /dev/null 2>&1
        fi
    done

    return $?
}

__clean_snapshots () {
    local _snapshots

    _snapshots="$(zfs list -Hrt snapshot -o name ${pool}${iocroot})"
    for _snap in $(echo ${_snapshots}) ; do
        zfs destroy -rR ${_snap} > /dev/null 2>&1
    done
}

__reclone_basejail () {
    local _fulluuid _fs_list _dataset _jail_base _jailed_dataset \
          _jailed_dataset_check _jail_datasets _base_inuse _origin _tag _uuid \
          _jail_mount _shortuuid _inherit_props

    _fulluuid="$1"
    _dataset="$2"
    _jail_base="$(__get_jail_prop base ${_fulluuid} ${_dataset})"
    _fs_list="$(zfs list -t snap -rH -o name ${pool}${iocroot}/base | \
             grep root@${_fulluuid})"
    _old_base_check="$(zfs list -Hr ${pool}${iocroot}/jails/${_fulluuid} | \
                     grep -v data | wc -l)"
    _jailed_dataset="${pool}${iocroot}/jails/${_fulluuid}/z"
    _jail_tag="$(__get_jail_prop tag ${_fulluuid} ${_dataset})"
    _jail_mount="$(__get_jail_prop mountpoint ${_fulluuid} ${_dataset})"
    _shortuuid="$(echo ${_fulluuid}|cut -f1 -d\-)"
    _jailed_dataset_check="$(zfs get -H creation ${_jailed_dataset} > \
                           /dev/null 2>&1 ; echo $?)"
    _inherit_props="$(__unset_inherited ${_fulluuid})"

    zfs destroy -f ${pool}${iocroot}/jails/${_fulluuid}/root > /dev/null 2>&1

    if [ $? -eq 1 ] ; then
        _jail_datasets="$(__find_jail ALL)"
        for _fs in ${_jail_datasets} ; do
            _origin="$(zfs get -H -o value origin ${_fs} | cut -f1 -d@)"
            _tag="$(zfs get -H -o value org.freebsd.iocage:tag ${_fs})"
            _uuid="$(zfs get -H -o value org.freebsd.iocage:host_hostuuid ${_fs})"

            if [ "${_origin}" = "${_dataset}" ] ; then
                __info "jail has dependent clone, uuid: ${_uuid} (${_tag})"
            fi
        done
        __info "${_jail_tag} will not be up to date with base: ${_jail_base}"
    else
        # Destroy the old datasets
        for _fs in ${_fs_list} ; do
            zfs destroy -f ${_fs}
        done
        # Set up the new RELEASE root dataset to be cloned from
        zfs snapshot ${pool}${iocroot}/base/${_jail_base}/root@${_fulluuid}

        # Recloning the root dataset and remounting the children
        eval "zfs clone -o readonly=on ${_inherit_props} \
            \"${pool}${iocroot}/base/${_jail_base}/root@${_fulluuid}\" \
            \"${pool}${iocroot}/jails/${_fulluuid}/root\""
    fi

    # Make sure the usr/home directory exists
    if [ ! -e "${iocroot}/base/${_jail_base}/root/usr/home" ] ; then
        mkdir ${iocroot}/base/${_jail_base}/root/usr/home
        cd ${iocroot}/base/${_jail_base}/root && ln -s usr/home home 2>&1
    fi

    # Make sure the usr/ports directory exists
    if [ ! -e "${iocroot}/base/${_jail_base}/root/usr/ports" ] ; then
        mkdir ${iocroot}/base/${_jail_base}/root/usr/ports
    fi
}

# This creates jails----------------------------------------------------
__create_jail () {
    local _installed _releases _zfsconfig _configured \
          _pname _prop _isprop _inherit_props

    _installed=$(zfs list -rH ${pool}${iocroot}/base | grep ${base})
    _releases=$(__list_jails -r | grep -v "Releases:")
    _devfs_string="$(grep -Fxq \
                  "## IOCAGE -- Add DHCP to ruleset 4" /etc/devfs.rules \
                  ; echo $?)"
    _base_inuse="$(zfs get -rH -o value origin ${pool} | \
                 grep ${pool}${iocroot}/base_old > /dev/null 2>&1 ; echo $?)"
    _release_dataset="${pool}${iocroot}/rel"
    _release_dataset_check="$(zfs get -H creation ${_release_dataset} > \
                           /dev/null 2>&1 ; echo $?)"
    _configured="0"

    if [ -z "${_installed}" -a -z "${_releases}" -a "${2}" != "-e" ] ; then
        __die "no RELEASEs found locally, run iocage fetch first."
    elif [ -z "${_installed}" -a "${2}" != "-e" -a "${1}" != "-g" ] ; then
        echo "  RELEASE ${base} not found locally." >&2
        echo "  Please fetch ${base}" >&2
        echo "" >&2

        echo "  These are the RELEASEs you have already fetched:" >&2
        printf "${_releases}\n" >&2
        exit 1
    fi

    # Check to see if the old ${pool}${iocroot}/base datasets are needed any longer
    if [ "${_base_inuse}" = "1" ] ; then
        zfs destroy -r ${pool}${iocroot}/base_old > /dev/null 2>&1
    fi

    # Remove this as we only needed it to skip the checks for plugins
    if [ "${1}" = "-g" ] ; then
        shift 2
    fi

    _isprop="$(echo ${2} | awk 'BEGIN { FS = "=" } ; { print $2 }')"

    # Look for null output, if it is, then no property is following create
    if [ "${2}" != "-e" -a ! -z "${2}" ] ; then
        if [ ! "${_isprop}" ] ; then
            __die "invalid switch ${2}"
        else
            for _p in "$@" ; do
                if [ "$(echo $_p | grep -e ".*=.*")" ] ; then
                    _pname="$(echo ${_p} | \
                            awk 'BEGIN { FS = "=" } ; { print $1 }')"
                    if [ "${_pname}" = "release" ] ; then
                        __die "please replace release= with base="
                    fi
                fi
            done
        fi
    fi

    if [ "${2}" = "-e" ] ; then
        # Look to see if the jail type is our default, otherwise let the type
        # be whatever the user wants, it does not matter for an empty jail.
        if [ "${type}" = "basejail" ] ; then
            type=emptyjail
        fi

        _zfsconfig="$(__configure_jail generate)"
        eval "zfs create -p ${_zfsconfig} \"${pool}${iocroot}/jails/${uuid}\""
        zfs create -p ${pool}${iocroot}/jails/${uuid}/root
	zfs create -p ${pool}${iocroot}/jails/${uuid}/_
        _configured="1"
    else
        # Clones the root dataset from the RELEASE and makes sure to configure
        # the properties on it.
        _fs_list=$(zfs list -rH -o name ${pool}${iocroot}/base/${base})
        zfs snapshot ${pool}${iocroot}/base/${base}/root@${uuid}
        _zfsconfig="$(__configure_jail generate)"
        for _fs in ${_fs_list} ; do
            _cfs=$(echo ${_fs} | sed s#/base/${base}#/jails/${uuid}#g)
            if [ "${_cfs}" = "${pool}${iocroot}/jails/${uuid}/root" ] ; then
                eval "zfs clone -o readonly=on ${_inherit_props} \
                    \"${_fs}@${uuid}\" \"${_cfs}\""
            else
                eval "zfs create ${_zfsconfig} \"${pool}${iocroot}/jails/${uuid}\""
                _inherit_props="$(__unset_inherited ${uuid})"
            fi
        done
	zfs create -p ${pool}${iocroot}/jails/${uuid}/_

        # Create all the unionfs r/w directories needed
        mkdir  -p ${iocroot}/jails/${uuid}/_/usr/local
        mkdir     ${iocroot}/jails/${uuid}/_/var
        mkdir     ${iocroot}/jails/${uuid}/_/etc
        mkdir     ${iocroot}/jails/${uuid}/_/usr/ports
        mkdir     ${iocroot}/jails/${uuid}/_/usr/home
        mkdir     ${iocroot}/jails/${uuid}/_/root
        mount  -t unionfs -o noatime,copymode=transparent \
                  ${iocroot}/jails/${uuid}/_/etc/ \
                  ${iocroot}/jails/${uuid}/root/etc
        if [ -e "/etc/localtime" ] ; then
            cp /etc/localtime ${iocroot}/jails/${uuid}/_/etc/
        fi

        _configured="1"
    fi

    # create tag link
    __link_tag ${pool}${iocroot}/jails/${uuid}

    # remove any residual clone snapshots carried over from the RELEASE datasets
    __snapremove ${uuid}@ALL ${pool}${iocroot}/jails/${uuid}

    touch ${iocroot}/jails/${uuid}/fstab

    # Make sure the jail isn't a empty jail
    if [ "${2}" = "-e" ] ; then
        echo ${uuid}
        return 0
    fi

    # at create time set the default rc.conf
    if [ -e "${iocroot}/jails/${uuid}/root/etc/rc.conf" ] ; then
        sed -i '' "1s/hostname=.*/hostname=\"${host_hostname}\"/" \
            ${iocroot}/jails/${uuid}/root/etc/rc.conf
    else
        echo "hostname=\"${host_hostname}\"" > \
            ${iocroot}/jails/${uuid}/root/etc/rc.conf
        __jail_rc_conf >> \
            ${iocroot}/jails/${uuid}/root/etc/rc.conf
    fi

    if [ ! -e "${iocroot}/jails/${uuid}/root/etc/resolv.conf" ] ; then
        __resolv_conf ${uuid} ${pool}${iocroot}/jails/${uuid} > \
            ${iocroot}/jails/${uuid}/root/etc/resolv.conf
    fi

    for _prop in "$@" ; do
        _pname="$(echo ${_prop} | awk 'BEGIN { FS = "=" } ; { print $1 }')"
        # Look to see if the user wants a jailed dataset,
        # if they do then create it
        if [ "${_pname}" = "jail_zfs" ] ; then
            zfs create -u -o compression=lz4 -o mountpoint=none -o jailed=on \
                ${pool}${jail_zfs_dataset}
        # Do they want bpf exposed?
        elif [ "${_pname}" = "bpf" ] ; then
            if [ "${_devfs_string}" != "0" ] ; then
                __bpf_devfs >> /etc/devfs.rules
                service devfs restart > /dev/null 2>&1
            fi

            # Set the right devfs ruleset for DHCP/BPF.
            zfs set org.freebsd.iocage:devfs_ruleset=5 \
                ${pool}${iocroot}/jails/${uuid}
        fi
    done

    # configure the jail mountpoint
#    __hack88_mount ${uuid} ${pool}${iocroot}/jails/${uuid}

    # Install extra packages
    # this requires working resolv.conf in jail
    if [ "${pkglist}" != "none" ] ; then
        # Mount all the filesytems needed to properly install pkg's
        # in a basejail
        mount -t tmpfs tmpfs ${iocroot}/jails/${uuid}/root/tmp
        mount -t devfs devfs ${iocroot}/jails/${uuid}/root/dev
        mount -t unionfs -o noatime,copymode=transparent \
                 ${iocroot}/jails/${uuid}/_/usr/local/ \
                 ${iocroot}/jails/${uuid}/root/usr/local
        mount -t unionfs -o noatime,copymode=transparent \
                 ${iocroot}/jails/${uuid}/_/var/ \
                 ${iocroot}/jails/${uuid}/root/var

        __pkg_install "${iocroot}/jails/${uuid}/root"
        __umount_basejail "${uuid}"
    fi

    __umount_basejail "${uuid}"
    echo "  Successfully created: ${uuid} (${tag})"

    if [ ! -z "${start}" ] ; then
        __start_jail "${uuid}" "${pool}${iocroot}/jails/${uuid}"
    fi
}

# Cloning jails ----------------------------------------------------------
__clone_jail () {
    local  _name _snapshot _dataset _fs _fs_list _zfsconfig  _cfs _pname _prop \
           _isprop _inherit_props

    _name="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $1 }')"
    _snapshot="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $2 }')"
    _isprop="$(echo ${1} | awk 'BEGIN { FS = "=" } ; { print $2 }')"

    if [ ! -z "${_name}" -a ! -z "${_isprop}" ] ; then
        __die "please specify UUID or TAG before any properties"
    fi

    if [ -z "${_name}" ] ; then
        __die "missing UUID or TAG!"
    fi

    _fulluuid="$(__check_name ${_name})"
    _dataset="$(__find_jail ${_name})" || exit $?

    if [ -z ${_dataset} ] ; then
        exit 1
    fi

    _fs_list="$(zfs list -rH -o name ${_dataset})"
    _zfsconfig="$(__configure_jail generate)"

    # Snapshot if they don't have one and then clone the target jail
    if [ -z "${_snapshot}" ] ; then
        zfs snapshot -r ${_dataset}@${uuid}
        for _fs in ${_fs_list} ; do
            _cfs="$(echo ${_fs} | \
                 sed s#${_dataset}#${pool}${iocroot}/jails/${uuid}#g)"
            eval "zfs clone -p ${_zfsconfig} \"${_fs}@${uuid}\" \"${_cfs}\""
            # See if they had a jailed dataset before
            if [ $(echo ${_cfs} | grep data$ | wc -l) -eq 1 ] ; then
                zfs clone -o mountpoint=none -o jailed=on ${_fs}@${uuid} ${_cfs}
            fi
        done
    else
        for _fs in ${_fs_list} ; do
            _cfs="$(echo ${_fs} | \
                 sed s#${_dataset}#${pool}${iocroot}/jails/${uuid}#g)"

            if [ "${_cfs}" = "${pool}${iocroot}/jails/${uuid}/root" ] ; then
                eval "zfs clone ${_inherit_props} \
                    \"${_fs}@${uuid}\" \"${_cfs}\""
            elif [ "${_cfs}" = "${pool}${iocroot}/jails/${uuid}" ] ; then
                eval "zfs create ${_zfsconfig} \"${pool}${iocroot}/jails/${uuid}\""
                _inherit_props="$(__unset_inherited ${uuid})"
            fi

            # See if they had a jailed dataset before
            if [ $(echo ${_cfs} | grep data$ | wc -l) -eq 1 ] ; then
                zfs clone -o mountpoint=none -o jailed=on ${_fs}@${_snapshot} \
                    ${_cfs}
            fi
        done
    fi

    __link_tag ${pool}${iocroot}/jails/${uuid}

    # Check if fstab already exists otherwise create it
    if [ -e ${iocroot}/jails/${uuid}/fstab ] ; then
        mv ${iocroot}/jails/${uuid}/fstab \
           ${iocroot}/jails/${uuid}/fstab.${_name}
        touch ${iocroot}/jails/${uuid}/fstab
    else
        touch ${iocroot}/jails/${uuid}/fstab
    fi

    # Check if rc.conf already exists otherwise create it
    if [ -e ${iocroot}/jails/${uuid}/root/etc/rc.conf ] ; then
        cat ${iocroot}/jails/${uuid}/root/etc/rc.conf | \
        sed -E "s/[a-zA-Z0-9]{8,}-.*-.*-.*-[a-zA-Z0-9]{12,}/${uuid}/g" \
            > ${iocroot}/jails/${uuid}/rc.conf
        mv ${iocroot}/jails/${uuid}/rc.conf \
           ${iocroot}/jails/${uuid}/root/etc/rc.conf
    else
        echo "hostname=\"${host_hostname}\"" > \
            ${iocroot}/jails/${uuid}/root/etc/rc.conf
        __jail_rc_conf >> \
            ${iocroot}/jails/${uuid}/root/etc/rc.conf
    fi

    # Check if localtime already exists otherwise create it
    if [ -e "/etc/localtime" -a ! -e "${iocroot}/jails/${uuid}/root/etc/localtime" ] ; then
        cp /etc/localtime ${iocroot}/jails/${uuid}/root/etc/
    fi

    # Check if resolv.conf already exists otherwise create it
    if [ ! -e ${iocroot}/jails/${uuid}/root/etc/resolv.conf ] ; then
        __resolv_conf ${uuid} ${pool}${iocroot}/jails/${uuid} > \
            ${iocroot}/jails/${uuid}/root/etc/resolv.conf
    fi

    # configure the jail mountpoint
#    __hack88_mount ${uuid} ${pool}${iocroot}/jails/${uuid}
    __set_jail_prop type=clonejail ${uuid} ${pool}${iocroot}/jails/${uuid}
    echo "  Successfully created: ${uuid} (${tag})"

    if [ ! -z "${start}" ] ; then
        __start_jail "${uuid}" "${pool}${iocroot}/jails/${uuid}"
    fi
}

# Destroy jails --------------------------------------------------------------
__destroy_jail () {
    local _name _answer _uuid_list _force _dataset _origin \
          _fulluuid _jail_path _state

    if [ -z "$1" ] ; then
        __die "missing UUID!"
    fi

    if [ "$1" = '-f' ] ; then
        _force="1"
        _name="$2"
    else
        _force="0"
        _name="$1"
    fi

    _fulluuid_dataset="$(__get_uuid_and_dataset ${_name})" || exit $?

    set ${_fulluuid_dataset}
    _fulluuid="$1"
    _dataset="$2"

    if [ -z ${_dataset} ] ; then
        __die "${_name} not found!"
    fi

    __check_children ${_dataset}

    _origin="$(zfs get -H -o value origin ${_dataset})"
    _jail_path="$(__get_jail_prop mountpoint ${_fulluuid} ${_dataset})"
    _state="$(__is_running ${_fulluuid})"
    _jail_type="$(__get_jail_prop type ${_fulluuid} ${_dataset})"

    __check_children ${_fulluuid} ${_dataset}

    if [ "${_force}" -ne "1" ] ; then
            echo " "
            echo "  WARNING: this will destroy jail ${_fulluuid}"
            echo "  Dataset: ${_dataset}"
            echo " "
            echo -n "  Are you sure ? y[N]: "
            read _answer

        if [ "${_answer}" = "Y" -o "${_answer}" = "y" ] ; then
            if [ ! -z ${_state} ] ; then
                __die "cannot destroy ${_name} - jail is running!"
            fi

            __destroy_func ${_fulluuid} ${_dataset} ${_origin} ${_jail_type}
        else
            echo "  Command not confirmed.  No action taken."
        fi
    else
        if [ ! -z ${_state} ] ; then
            __stop_jail ${_fulluuid} ${_dataset}
        fi
        __destroy_func ${_fulluuid} ${_dataset} ${_origin} ${_jail_type}
    fi
}

__destroy_func () {
    local _fulluuid _dataset _origin _jail_type _base_inuse

    _fulluuid="$1"
    _dataset="$2"
    _origin="$3"
    _jail_type="$4"
    _base_inuse="$(zfs get -r -H -o value origin ${pool} | \
                 grep ${pool}${iocroot}/base > \
                 /dev/null 2>&1 ; echo $?)"

    echo "  Destroying: ${_fulluuid}"

    __unlink_tag ${_dataset}

    zfs destroy -fr ${_dataset}

    if [ "${_origin}" != "-" ] ; then
        echo "  Destroying clone origin: ${_origin}"
        zfs destroy -r ${_origin}
    fi

    if [ ${_jail_type} = "basejail" ] ; then
        if [ "${_base_inuse}" = "0" ] ; then
            zfs destroy -fr ${pool}${iocroot}/base@${_fulluuid} > /dev/null 2>&1
        fi
    fi
}

# check if our datasets exist, if not create them
# fixes https://github.com/iocage/iocage/issues/80
__check_filesystems () {
    local _altroot _filesystems _missing

    _missing=0
    _altroot="$(zpool get -H altroot ${pool} | awk '{print $3}')"
    # Prepend ${iocroot} so we can properly set a mount on the root 'iocage'
    # dataset.
    _filesystems="${iocroot}
                  ${iocroot}/.defaults
                  ${iocroot}/rel
                  ${iocroot}/jails
                  ${iocroot}/base"

    # Check for /etc/devfs.rules, this avoids an annoying error from grep later
    if [ ! -e "/etc/devfs.rules" ] ; then
        touch /etc/devfs.rules
    fi

    # Loop through and make sure the filesystems exist. Make sure you are root
    for _fs in $(echo ${_filesystems}) ; do
        zfs get -H creation ${pool}${_fs} > /dev/null 2>&1
        if [ $? -ne 0 ] ; then
            _missing=1
            if [ "$(whoami)" != "root" ] ; then
                __die "Please run as root to create missing datasets."
            else
                __info "creating ${pool}${_fs}"
                zfs create -p ${pool}${_fs}
                zfs set mountpoint=${_fs} ${pool}${_fs}
                if [ ${_fs} == "${iocroot}/.defaults" ] ; then
                    __configure_jail ${pool}${iocroot}/.defaults > /dev/null 2>&1
                fi
            fi
        fi
    done

    # TODO: REVIEW / FIX THIS...
    export jail_datasets="$(zfs list -d3 -rH -o name ${pool}${iocroot} \
                        | grep -Ev "jails$|base$|rel|${pool}${iocroot}$|${pool}${iocroot}/.defaults$|*./root|*./z|*./_")"
}

__check_children () {
    local _dataset _jail_datasets _fs _origin _tag _fulluuid \
          _uuid

    _fulluuid="$1"
    _dataset="$2"
    _jail_datasets="$(__find_jail ALL)"

    for _fs in $_jail_datasets ; do
        _origin="$(zfs get -H -o value origin $_fs | cut -f1 -d@)"
        _tag="$(zfs get -H -o value org.freebsd.iocage:tag $_fs)"
        _uuid="$(zfs get -H -o value org.freebsd.iocage:host_hostuuid $_fs)"

        if [ $_origin == "$_dataset" ] ; then
            __die "jail has dependent clone, uuid: $_uuid ($_tag)"
        fi
    done
}

# Accepts one argument. Which is used as the UUID for the mount operations
__mount_basejail () {
    local _fulluuid="$1"
    local _mountopts="-t unionfs -o noatime,copymode=transparent"
    local _jfs=$(zfs list -o name -rH ${pool}${iocroot}/jails | grep "${_fulluuid}$")    
    local _jfss=$(zfs list -o name -rH ${pool}${iocroot}/jails | grep "${_fulluuid}" | grep -Ev '${_fulluuid}$')    

    for _fss in ${_jfs} ; do
	zfs mount ${_fs}
    done

    # Mount the overlays needed for basejails
    mount ${_mountopts} \
        ${iocroot}/jails/${_fulluuid}/_/etc \
        ${iocroot}/jails/${_fulluuid}/root/etc
    mount ${_mountopts} \
        ${iocroot}/jails/${_fulluuid}/_/root \
        ${iocroot}/jails/${_fulluuid}/root/root
    mount ${_mountopts} \
        ${iocroot}/jails/${_fulluuid}/_/usr/home \
        ${iocroot}/jails/${_fulluuid}/root/usr/home
    mount ${_mountopts} \
        ${iocroot}/jails/${_fulluuid}/_/usr/local \
        ${iocroot}/jails/${_fulluuid}/root/usr/local
    mount ${_mountopts} \
        ${iocroot}/jails/${_fulluuid}/_/var \
        ${iocroot}/jails/${_fulluuid}/root/var

    # Check to make sure the ports directory exists
    if [ ! -e "${iocroot}/jails/${_fulluuid}/_/usr/ports" ] ; then
        mkdir "${iocroot}/jails/${_fulluuid}/_/usr/ports"
    fi

    # Mount /usr/ports using nullfs (READ-ONLY) 
    mount -t nullfs -o ro /usr/ports ${iocroot}/jails/${_fulluuid}/root/usr/ports

    # Mount tmpfs
    mount -t tmpfs tmpfs ${iocroot}/jails/${_fulluuid}/root/tmp
}

# Accepts one argument. Which is used as the UUID for the umount operations
__umount_basejail () {
    local _fulluuid="$1"

  # Unmounts all the basejails overlays and tmpfs so the jail can be manipulated
    umount ${iocroot}/jails/${_fulluuid}/root/root      > /dev/null 2>&1
    umount ${iocroot}/jails/${_fulluuid}/root/etc       > /dev/null 2>&1
    umount ${iocroot}/jails/${_fulluuid}/root/usr/local > /dev/null 2>&1
    umount ${iocroot}/jails/${_fulluuid}/root/usr/home  > /dev/null 2>&1
    umount ${iocroot}/jails/${_fulluuid}/root/usr/ports > /dev/null 2>&1
    umount ${iocroot}/jails/${_fulluuid}/root/var       > /dev/null 2>&1
    umount ${iocroot}/jails/${_fulluuid}/root/tmp       > /dev/null 2>&1
}

# Accepts one argument. It uses that argument as the name/UUID.
__unset_inherited () {
    local _name _inherit

    _name="${1}"
    _inherit="$(zfs get -Hs "local" all ${pool}${iocroot}/jails/${_name} | \
              grep "org.freebsd.iocage" | \
              awk '{ print $2}')"
    for _p in ${_inherit} ; do
        echo -n "-o ${_p}=\"-\" "
    done
}
