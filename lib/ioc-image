#!/bin/sh

__import_thick () {
    local _name _image _icount _icksum _new_cksum _old_cksum _uuid _ibase

    _name="${1}"
    _image="$(find ${iocroot}/images/ -name ${_name}\*.tar.xz)"
    _icount="$(echo ${_image}|wc -w)"
    _ibase="$(echo ${_image} | cut -d "_" -f 2 | \
        awk 'BEGIN { FS = "." } ; { print $1"."$2 }')"
    _icksum="$(find ${iocroot}/images/ -name ${_name}\*.sha256)"

    # If they don't have a release specified, we assume it's the same as host
    if [ "$(echo ${_ibase} | grep "/")" ] ; then
        # Remove STABLE or CURRENT from the name as we only can fetch RELEASEs
        _ibase="$(echo ${base} | sed -E 's/CURRENT.*|STABLE.*/RELEASE/')"
    fi

    if [ "${_icount}" -gt 0 ] ; then
        echo "* Found image ${_image}"
        echo "* Importing image ${_image}"

        if [ ! -f "${_icksum}" ] ; then
            echo "  ERROR: Missing checksum file!" >&2
            exit 1
        fi

        _new_cksum="$(sha256 -q ${_image})"
        _old_cksum="$(cat ${_icksum})"

        if [ "${_new_cksum}" != "${_old_cksum}" ] ; then
            echo "  ERROR: Checksum mismatch. Exiting." >&2
            exit 1
        else
            # Because any jail being imported this way are thickjails
            export type=thickjail
            _uuid="$(__create_jail "" -e)"
            tar -xvJf "${_image}" -C "${iocroot}/jails/${_uuid}/root"
            zfs set org.freebsd.iocage:base="${_ibase}" \
            "${pool}${iocroot}/jails/${_uuid}"
        fi

    else
        __die "image ${_name} not found!"
    fi

    cat "${iocroot}/jails/${_uuid}/root/etc/rc.conf" | \
    sed -E "s/[a-zA-Z0-9]{8,}-.*-.*-.*-[a-zA-Z0-9]{12,}/${_uuid}/g" \
    > "${iocroot}/jails/${_uuid}/rc.conf"

    mv "${iocroot}/jails/${_uuid}/rc.conf" \
    "${iocroot}/jails/${_uuid}/root/etc/rc.conf"
}

__import () {
    local _name _fulluuid _tag _image _icount _ibase _idate _jail_base \
          _spinner _date

    _name="${1}"

    if [ -z "${_name}" ] ; then
        __die "missing image UUID!"
    fi

    _image="$(find ${iocroot}/images/ ! -name '*.sha256' -name ${_name}\*)"
    _ibase="$(echo ${_image} | cut -d "_" -f 2 | \
        awk 'BEGIN { FS = "." } ; { print $1"."$2 }')"
    _date=$(date "+%F")
    _idate="$(echo ${_image} | cut -d "-" -f 6-)"
    _icount="$(echo ${_image} | wc -w)"

    if [ -z "${_image}" ] ; then
        __die "${_name} not found!"
    fi

    # If they don't have a release specified, we assume it's the same as host
    if [ "$(echo ${_ibase} | grep "/")" ] ; then
        # Remove STABLE or CURRENT from the name as we only can fetch RELEASEs
        _ibase="$(echo ${base} | sed -E 's/CURRENT.*|STABLE.*/RELEASE/')"
    fi

    if [ "${_icount}" -gt 1 ] ; then
        __die "multiple matching images, please narrow down UUID."
    fi

    if [ -z "$(echo ${_image} | grep -E 'thickjail.*.tar.xz|basejail.*.tar.xz')" ] ; then
        # Strip the extension off the image name for later
        _image="$(echo ${_image} | cut -d "." -f 1)"

        # Rename old exports to our new naming
        mv "${_image}.tar.xz" \
            "${_image}-thickjail-${_date}.tar.xz"
        mv "${_image}.sha256" \
            "${_image}-thickjail-${_date}.sha256"

        # Make sure _image reflects that new name
        _image="${_image}-thickjail-${_date}.tar.xz"
    fi

    if [ "$(echo ${_image} | grep -E 'thickjail.*.tar.xz')" ] ; then
        __export_props "$@"
        __import_thick "${_name}"
        exit $?
    fi

    if [ -e "${iocroot}/jails/${_name}" ] ; then
        _fulluuid="$(__check_name ${_name})"
        _tag="$(__get_jail_prop tag ${_fulluuid})"
        __die "${_name} has already been imported (${_tag})"
    elif [ ! -e "${iocroot}/base/${_ibase}" ] ; then
        __die "please fetch ${_ibase} first."
    else
        # __spinner needs to be recreated here as we redirect with zfs send
        _spinner='/-\|'

        printf "  INFO: importing ${_name}:  "

        while true; do
            printf '\b%.1s' "${_spinner}"
            _spinner=${_spinner#?}${_spinner%???}
            sleep .1
        done &

        trap "kill $!" 2 3
        zfs recv -d "${pool}" < "${_image}"
        printf "\b%1s\n" "done!" ; kill $! && trap " " 2 3
    fi
}

# Basejail needs to have it's /root recreated before it can be started
__post_import_tasks () {
    local _name _dataset _jail_base

    _name="${1}"
    _dataset="${pool}${iocroot}/jails/${_name}"
    _jail_base="$(zfs get -H -o value org.freebsd.iocage:base ${_dataset})"

    zfs snapshot "${pool}${iocroot}/base/${_jail_base}/root@${_name}"
    zfs clone -o readonly=on \
        "${pool}${iocroot}/base/${_jail_base}/root@${_name}" \
        "${pool}${iocroot}/jails/${_name}/root"
}

__export () {
    local _name _dataset _date _fulluuid _jail_base  _spinner

    _name="${1}"
    _dataset=$(__find_jail ${_name})
    _fulluuid="$(__check_name ${_name})"
    _tag="$(__get_jail_prop tag ${_fulluuid})"
    _date=$(date "+%F")
    _jail_base="$(__get_jail_prop base ${_fulluuid})"
    _export_name="${iocroot}/images/${_fulluuid}-basejail-${_date}_${_jail_base}"

    if [ -z "${_name}" ] ; then
        __die "missing UUID or TAG!"
    fi

    if [ -z "${_dataset}" ] ; then
        __die "${_name} not found."
    fi

    if [ ! -d "${iocroot}/images" ] ; then
        mkdir ${iocroot}/images
    fi

    # __spinner needs to be recreated here as we redirect with zfs send
    _spinner='/-\|'

    printf "  INFO: exporting ${_fulluuid} (${_tag}):  "

    while true; do
        printf '\b%.1s' "${_spinner}"
        _spinner=${_spinner#?}${_spinner%???}
        sleep .1
    done &

    trap "kill $!" 2 3
    zfs snapshot "${pool}${iocroot}/jails/${_fulluuid}@ioc-export-${_date}"
    zfs send -p "${pool}${iocroot}/jails/${_fulluuid}@ioc-export-${_date}" > \
                "${_export_name}"
    zfs destroy "${pool}${iocroot}/jails/${_fulluuid}@ioc-export-${_date}"
    printf "\b%1s\n" "done!" ; kill $! && trap " " 2 3
}

__export_thick () {
    # Export a thiickjail with a sha256 checksum
    local _name _dataset _date _fulluuid _jail_path _jail_base _state \
          _mountpoint

    _name="${1}"
    _dataset=$(__find_jail ${_name})
    _date=$(date "+%F")
    _fulluuid="$(__check_name ${_name})"
    _jail_path="$(__get_jail_prop mountpoint ${_fulluuid})"
    _jail_base="$(__get_jail_prop base ${_fulluuid})"
    _state=$(jls|grep ${_jail_path} | wc -l)
    _mountpoint="$(__get_jail_prop mountpoint ${_fulluuid})"

    if [ -z "${_name}" ] ; then
        echo "  ERROR: Missing UUID!" >&2
        exit 1
    fi

    if [ -z "${_dataset}" ] ; then
        echo "  ERROR: ${_name} not found." >&2
        exit 1
    fi

    if [ "${_dataset}" = "multiple" ] ; then
        echo "  ERROR: Multiple matching UUIDs!" >&2
        exit 1
    fi

    if [ "${_state}" -gt "0" ] ; then
        echo "  ERROR: ${_fulluuid} is running!" >&2
        echo "  Stop jail before exporting!" >&2
        exit 1
    fi

    if [ ! -d "${iocroot}/images" ] ; then
        mkdir ${iocroot}/images
    fi

    # thickjails aren't supported for creation with 2.0
    # this is to migrate their property.
    if [ "${_jail_base}" = "none" ] ; then
        _jail_base="$(__get_jail_prop release ${_fulluuid})"
    fi

    _export_name="${iocroot}/images/${_fulluuid}-thickjail-${_date}_${_jail_base}"

    echo "* Exporting ${_fulluuid}"
    tar -cvJf "${_export_name}.tar.xz" -C \
        "${_mountpoint}/root" . \
    && sha256 -q "${_export_name}.tar.xz" > "${_export_name}.sha256"
    echo "* Image saved to: ${_export_name}.tar.xz"
    echo "* Checksum created: ${_export_name}.sha256"
}
