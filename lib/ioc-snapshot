#!/bin/sh

__snapshot () {
    local name="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $1 }')"
    local snapshot="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $2 }')"

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local date=$(date "+%F_%T")

    if [ ! -z $snapshot ] ; then
        zfs snapshot -r ${dataset}@${snapshot}
    else
        zfs snapshot -r ${dataset}@ioc-${date}
    fi
}


__snapremove () {
    local _name _snap _snapshot _snapshots _dataset
    _name="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $1 }')"
    _snapshot="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $2 }')"

    if [ -z ${_name} ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    _dataset="$(__find_jail ${_name})"

    if [ -z ${_dataset} ] ; then
        echo "  ERROR: jail dataset not found"
        exit 1
    fi

    if [ ${_dataset} == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    if [ ! -z ${_snapshot} ] && [ "${_snapshot}" != "ALL" ] ; then
        echo "* removing snapshot: ${_snapshot}"
        zfs destroy -r ${_dataset}@${_snapshot}
    elif [ "${_snapshot}" == "ALL" ] ; then
        _snapshots="$(zfs list -d1 -Hrt snapshot -o name ${_dataset})"
        for _snap in $(echo ${_snapshots}) ; do
            zfs destroy -r ${_snap}
        done 
    else
        echo "  ERROR: snapshot not found"
        exit 1
    fi
}

__snaplist () {
    local name="$1"

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"
    local snapshots="$(zfs list -Hrt snapshot -d1 $dataset | awk '{print $1}')"

    printf "%-13s  %-21s  %s   %s\n" "NAME" "CREATED"\
            "RSIZE" "USED"

    for i in $snapshots ; do
        local snapname=$(echo $i|cut -f 2 -d \@)
        local creation="$(zfs get -H -o value creation $i)"
        local used="$(zfs get -H -o value used $i)"
        local referenced="$(zfs get -H -o value referenced $i)"

        printf "%-13s  %-21s  %s    %s\n" "$snapname" "$creation"\
                   "$referenced" "$used"
    done

}

__rollback () {
    local name="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $1 }')"
    local snapshot="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $2 }')"
    local dataset=$(__find_jail $name)

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fs_list=$(zfs list -rH -o name $dataset)

    if [ ! -z "$snapshot" ] ; then
        for fs in $fs_list ; do
            echo "* Rolling back to ${fs}@${snapshot}"
            zfs rollback -r ${fs}@${snapshot}
        done
    fi
}

__promote () {
    local name="$1"

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found"
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: multiple matching UUIDs!"
        exit 1
    fi

    local fs_list=$(zfs list -rH -o name $dataset)

    if [ -z $dataset ] ; then
        echo "  ERROR: dataset not found"
        exit 1
    fi

    for fs in $fs_list ; do
        local origin="$(zfs get -H -o value origin $fs)"

        if [ "$origin" != "-" ] ; then
            echo "* promoting filesystem: $fs"
            zfs promote $fs
            continue
        else
            echo "  INFO: filesystem $fs is not a clone"
        fi
    done
}

