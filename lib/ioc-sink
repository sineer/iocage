#!/bin/sh

__sink () {
    local name=$1
    local jlist="/tmp/iocage-jail-list.$$"
    local jails="$(zfs list -d1 -rH -o name ${pool}${iocroot}/jails \
                 | grep -E \
                "^${pool}${iocroot}/jails/[a-zA-Z0-9]{8,}*-*.[a-zA-Z0-9]{4,}$")"
    
    for jail in $jails ; do
        found="$(echo $jail |grep -iE "^${pool}${iocroot}/jails/$name"|wc -l)"
        local tag="$(zfs get -H -o value org.freebsd.iocage:tag $jail)"

        if [ "$found" -eq 1 ] ; then
            echo $jail >> $jlist
        fi

        if [ $tag == $name ] ; then
            echo $jail >> $jlist
        fi
    done

    if [ ! -e $jlist ] ; then
        exit 0
    fi

    if [ "$(cat $jlist|wc -l)" -eq "1" ] ; then
	local jpool=$(cat $jlist)
	uuid=$(zfs get -H -o value org.freebsd.iocage:host_hostuuid $jpool)
	zfs set jailed=off ${jpool}/data
	#zfs set mountpoint=${pool}${iocroot}/sinks/${uuid}/data ${jpool}/data
	zfs rename $jpool ${pool}${iocroot}/sinks/${uuid}

	# TODO: ZFS SNAPSHOT ?
	exit 0
    elif [ "$(cat $jlist|wc -l)" -gt "1" ] ; then
        #echo "multiple"
	exit 1
    fi
}

__unsink () {
    local name=$1
    local slist="/tmp/iocage-sink-list.$$"
    local sinks="$(zfs list -d1 -rH -o name ${pool}${iocroot}/sinks \
                 | grep -E \
                "^${pool}${iocroot}/sinks/[a-zA-Z0-9]{8,}*-*.[a-zA-Z0-9]{4,}$")"
    
    for sink in $sinks ; do
        found="$(echo $sink |grep -iE "^${pool}${iocroot}/sinks/$name"|wc -l)"
        local tag="$(zfs get -H -o value org.freebsd.iocage:tag $sink)"

        if [ "$found" -eq 1 ] ; then
            echo $sink >> $slist
        fi

        if [ $tag == $name ] ; then
            echo $sink >> $slist
        fi
    done

    if [ ! -e $slist ] ; then
        exit 0
    fi

    if [ "$(cat $slist|wc -l)" -eq "1" ] ; then
	local spool=$(cat $slist)
	uuid=$(zfs get -H -o value org.freebsd.iocage:host_hostuuid $spool)
	zfs rename $spool ${pool}${iocroot}/jails/${uuid}
	zfs set jailed=on ${pool}${iocroot}/jails/${uuid}/data
	exit 0
    elif [ "$(cat $jlist|wc -l)" -gt "1" ] ; then
        #echo "multiple"
	exit 1
    fi
	 
}

# Find and return the jail's top level ZFS dataset

__find_sink () {
    local name=$1
    local slist="/tmp/iocage-sink-list.$$"
    local sinks="$(zfs list -d1 -rH -o name ${pool}${iocroot}/sinks \
                 | grep -E \
                "^${pool}${iocroot}/sinks/[a-zA-Z0-9]{8,}*-*.[a-zA-Z0-9]{4,}$")"

    if [ "${name}" == "ALL" ] ; then
        for sink in $sinks ; do
            echo $sink
        done
    elif [ "${name}" == "default" ] ; then
        echo "${pool}${iocroot}/.defaults"
    else
        for jail in $jails ; do
            found="$(echo $jail |grep -iE "^${pool}${iocroot}/jails/$name"|wc -l)"
            local tag="$(zfs get -H -o value org.freebsd.iocage:tag $jail)"

            if [ "$found" -eq 1 ] ; then
                echo $jail >> $jlist
            fi

            if [ $tag == $name ] ; then
                echo $jail >> $jlist
            fi
        done

        if [ ! -e $jlist ] ; then
            exit 0
        fi

        if [ "$(cat $jlist|wc -l)" -eq "1" ] ; then
            cat $jlist
        elif [ "$(cat $jlist|wc -l)" -gt "1" ] ; then
            echo "multiple"
        fi
    fi

    rm  -f $jlist
}

__list_sinks () {
    local sinks=$(__find_sink ALL)
    local switch=$1

    if [ ! -z ${switch} ] && [ ${switch} == "--long" ] ; then
        __list_sinks_long
        exit 0
    fi

    if [ ! -z ${switch} ] && [ $switch == "-r" ] ; then
        echo "Downloaded releases:"
        local releases="$(zfs list -o name -Hr ${pool}${iocroot}/releases \
                        | grep RELEASE$ | cut -d \/ -f 4)"
        for rel in $(echo $releases) ; do
            printf "%15s\n" "$rel"
        done
        exit 0
    fi

    printf "%-4s  %-13s  %s  %s  %s\n" "JID" "UUID"  "BOOT"\
           "STATE" "TAG"
    for sink in $sinks ; do
        uuid=$(zfs get -H -o value org.freebsd.iocage:host_hostuuid $sink)
        boot=$(zfs get -H -o value org.freebsd.iocage:boot $sink)
        tag=$(zfs get -H -o value org.freebsd.iocage:tag $sink)
        sink_path=$(zfs get -H -o value mountpoint $sink)
        state=$(jls | grep ${sink_path} | awk '{print$1}')
        template=$(zfs get -H -o value org.freebsd.iocage:template $sink)

	# TODO ...	
	printf "%-4s  %-+.13s  %-4s  %-4s   %s\n" "$jid" "$uuid"  \
                "$boot" "$state" "$tag"
    done
}

__list_sinks_long () {
    local _sinks _switch _uuid _boot _tag _sink_path _state \
          _template _interfaces _ip4_addr _ip6_addr _vnet _vnet0_mac \
          _vnet1_mac _vnet2_mac _vnet3_mac _type

    _sinks=$(__find_sink ALL)
    _switch=$1

    for _sink in $_sinks ; do
        _uuid=$(zfs get -H -o value org.freebsd.iocage:host_hostuuid $_sink)
        _boot=$(zfs get -H -o value org.freebsd.iocage:boot $_sink)
        _tag=$(zfs get -H -o value org.freebsd.iocage:tag $_sink)
        _sink_path=$(zfs get -H -o value mountpoint $_sink)
        _state=$(jls | grep ${_sink_path} | awk '{print$1}')
        _template=$(zfs get -H -o value org.freebsd.iocage:template $_sink)
        _interfaces=$(zfs get -H -o value org.freebsd.iocage:interfaces $_sink)
        _ip4_addr=$(zfs get -H -o value org.freebsd.iocage:ip4_addr $_sink)
        _ip6_addr=$(zfs get -H -o value org.freebsd.iocage:ip6_addr $_sink)
        _vnet=$(zfs get -H -o value org.freebsd.iocage:vnet $_sink)
        _vnet0_mac=$(zfs get -H -o value org.freebsd.iocage:vnet0_mac $_sink)
        _vnet1_mac=$(zfs get -H -o value org.freebsd.iocage:vnet1_mac $_sink)
        _vnet2_mac=$(zfs get -H -o value org.freebsd.iocage:vnet2_mac $_sink)
        _vnet3_mac=$(zfs get -H -o value org.freebsd.iocage:vnet3_mac $_sink)
        _type=$(zfs get -H -o value org.freebsd.iocage:type $_sink)

        printf "%s\n" "JID: $_jid" "UUID: $_uuid" "BOOT: $_boot" \
                "STATE: $_state" "TAG: $_tag" "IPV4: $_ip4_addr"  \
                "IPV6: $_ip6_addr" "VNET: $_vnet" "TYPE: $_type"

        if [ $_vnet == "on" ] ; then
            printf "%s\n" "INTERFACES: $_interfaces"
        fi

        if [ $_vnet == "on" -a $_vnet0_mac != "none" ] ; then
            printf "%s\n" "VNET0_MAC: $_vnet0_mac"
        fi

        if [ $_vnet == "on" -a $_vnet1_mac != "none" ] ; then
            printf "%s\n" "VNET1_MAC: $_vnet1_mac"
        fi

        if [ $_vnet == "on" -a $_vnet2_mac != "none" ] ; then
            printf "%s\n" "VNET2_MAC: $_vnet2_mac"
        fi

        if [ $_vnet == "on" -a $_vnet3_mac != "none" ] ; then
            printf "%s\n" "VNET3_MAC: $_vnet3_mac"
        fi

    done
}
